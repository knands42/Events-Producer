x-kafka-controller-env: &kafka-controller-env
    KAFKA_PROCESS_ROLES: controller
    KAFKA_LISTENERS: CONTROLLER://:9093
    KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
    KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
    KAFKA_CLUSTER_ID: "5L6g3nShT-eMCtk--X86sw"
    KAFKA_LOG4J_OPTS: -Dlog4j.configuration=file:/tmp/log4j.properties
    KAFKA_OPTS: "-javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.1.0.jar=9300:/usr/share/jmx_exporter/kafka-broker.yml"
    
x-kafka-broker-env: &kafka-broker-env
    KAFKA_PROCESS_ROLES: broker
    KAFKA_LISTENERS: 'INTERNAL://:19092,OUTSIDE://:9092'
    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT,CONTROLLER:PLAINTEXT
    KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
    KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
    KAFKA_CLUSTER_ID: "5L6g3nShT-eMCtk--X86sw"
    KAFKA_LOG4J_OPTS: -Dlog4j.configuration=file:/tmp/log4j.properties
    KAFKA_OPTS: "-javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.1.0.jar=9300:/usr/share/jmx_exporter/kafka-broker.yml"

x-kafka-controller-base: &kafka-controller-base
    image: apache/kafka:3.8.1
    restart: on-failure
    command:
        - /bin/sh
        - -c
        - |
          echo '
          log4j.rootLogger=INFO, stdout, kafkaAppender
          log4j.appender.stdout=org.apache.log4j.ConsoleAppender
          log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
          log4j.appender.stdout.layout.conversionPattern=[%d] %p %m (%c)%n
          log4j.appender.kafkaAppender=org.apache.log4j.RollingFileAppender
          log4j.appender.kafkaAppender.File=/opt/kafka/logs/kafka.log
          log4j.appender.kafkaAppender.MaxFileSize=10MB
          log4j.appender.kafkaAppender.MaxBackupIndex=10
          log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout
          log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
          ' > /tmp/log4j.properties
          /etc/kafka/docker/run
    volumes:
        - ./volumes/jmx_exporter:/usr/share/jmx_exporter
    networks:
        - app-network

x-kafka-broker-base: &kafka-broker-base
    image: apache/kafka:3.8.1
    restart: on-failure
    command:
        - /bin/sh
        - -c
        - |
            echo '
            log4j.rootLogger=INFO, stdout, kafkaAppender
            log4j.appender.stdout=org.apache.log4j.ConsoleAppender
            log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
            log4j.appender.stdout.layout.conversionPattern=[%d] %p %m (%c)%n
            log4j.appender.kafkaAppender=org.apache.log4j.RollingFileAppender
            log4j.appender.kafkaAppender.File=/opt/kafka/logs/kafka.log
            log4j.appender.kafkaAppender.MaxFileSize=10MB
            log4j.appender.kafkaAppender.MaxBackupIndex=10
            log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout
            log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
            ' > /tmp/log4j.properties
            /etc/kafka/docker/run
    networks:
        - app-network
    depends_on:
        - kafka-controller-1
        - kafka-controller-2
        - kafka-controller-3
    healthcheck:
        test: [ "CMD", "kafka-topics", "--botstrap-server", "localhost:9092", "--list" ]
        interval: 10s
        timeout: 5s

x-spark-common: &spark-common
    image: bitnami/spark:3.5.0
    volumes:
        - ./jobs:/opt/bitnami/spark/jobs
        - ./mnt/checkpoints:/mnt/spark-checkpoints
        - ./mnt/spark-state:/mnt/spark-state
    networks:
        - app-network

services:
    kafka-controller-1:
        <<: *kafka-controller-base
        container_name: kafka-controller-1
        environment:
            <<: *kafka-controller-env
            KAFKA_NODE_ID: 1
        volumes:
            - ./volumes/controller_data_1:/var/lib/kafka/data
            - ./logs/controller-logs_1:/opt/kafka/logs
            - ./volumes/jmx_exporter:/usr/share/jmx_exporter

    kafka-controller-2:
        <<: *kafka-controller-base
        container_name: kafka-controller-2
        environment:
            <<: *kafka-controller-env
            KAFKA_NODE_ID: 2
        volumes:
            - ./volumes/controller_data_2:/var/lib/kafka/data
            - ./logs/controller-logs_2:/opt/kafka/logs
            - ./volumes/jmx_exporter:/usr/share/jmx_exporter

    kafka-controller-3:
        <<: *kafka-controller-base
        container_name: kafka-controller-3
        environment:
            <<: *kafka-controller-env
            KAFKA_NODE_ID: 3
        volumes:
            - ./volumes/controller_data_3:/var/lib/kafka/data
            - ./logs/controller-logs_3:/opt/kafka/logs
            - ./volumes/jmx_exporter:/usr/share/jmx_exporter

    kafka-broker-1:
        <<: *kafka-broker-base
        container_name: kafka-broker-1
        ports:
            - "29092:9092"
        environment:
            <<: *kafka-broker-env
            KAFKA_NODE_ID: 4
            KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka-broker-1:19092,OUTSIDE://localhost:29092'
        volumes:
            - ./volumes/broker_data_1:/var/lib/kafka/data
            - ./logs/broker-logs_1:/opt/kafka/logs
            - ./volumes/jmx_exporter:/usr/share/jmx_exporter

    kafka-broker-2:
        <<: *kafka-broker-base
        container_name: kafka-broker-2
        ports:
            - "39092:9092"
        environment:
            <<: *kafka-broker-env
            KAFKA_NODE_ID: 5
            KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka-broker-2:19092,OUTSIDE://localhost:39092'
        volumes:
            - ./volumes/broker_data_2:/var/lib/kafka/data
            - ./logs/broker-logs_2:/opt/kafka/logs
            - ./volumes/jmx_exporter:/usr/share/jmx_exporter

    kafka-broker-3:
        <<: *kafka-broker-base
        container_name: kafka-broker-3
        ports:
            - "49092:9092"
        environment:
            <<: *kafka-broker-env
            KAFKA_NODE_ID: 6
            KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka-broker-3:19092,OUTSIDE://localhost:49092'
        volumes:
            - ./volumes/broker_data_3:/var/lib/kafka/data
            - ./logs/broker-logs_3:/opt/kafka/logs
            - ./volumes/jmx_exporter:/usr/share/jmx_exporter

    schema-registry:
        image: confluentinc/cp-schema-registry:7.5.1
        container_name: schema-registry
        ports:
            - "18081:18081"
        environment:
            SCHEMA_REGISTRY_HOST_NAME: schema-registry
            SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-broker-1:19092,kafka-broker-2:19092,kafka-broker-3:19092
            SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
            SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:18081
        depends_on:
            - kafka-broker-1
            - kafka-broker-2
            - kafka-broker-3
        networks:
            - app-network
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:18081/subjects" ]
            interval: 30s
            timeout: 10s
            retries: 5

    kafka-console:
        image: docker.redpanda.com/redpandadata/console:v2.5.2
        container_name: kafka-console
        entrypoint: /bin/sh
        command: |-
            -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
        ports:
            - 8080:8080
        networks:
            - app-network
        depends_on:
            schema-registry:
                condition: service_healthy
        environment:
            CONFIG_FILEPATH: /tmp/config.yml
            CONSOLE_CONFIG_FILE: >
                kafka:
                  brokers: ["kafka-broker-1:19092", "kafka-broker-2:19092", "kafka-broker-3:19092"]
                  schemaRegistry:
                    enabled: true
                    urls: ["http://schema-registry:18081"]

                redpanda:
                  adminApi:
                    enabled: false
                    urls: ["http://kafka-broker-1:19092"]
                connect:
                  enabled: false
                  clusters:
                    - name: local-connect-clusters
                      url: http://connect:8083
    
    # Monitoring
    prometheus:
        image: prom/prometheus:v3.0.0
        container_name: prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./monitoring/prometheus:/etc/prometheus
        depends_on:
            - kafka-broker-1
            - kafka-broker-2
            - kafka-broker-3
        networks:
            - app-network

    alertmanager:
        image: prom/alertmanager:v0.27.0
        container_name: alertmanager
        ports:
            - "59093:9093"
        networks:
            - app-network

    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
            - "3000:3000"
        volumes:
            - ./volumes/grafana-data:/var/lib/grafana
            - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
            - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
        networks:
            - app-network

    postgres:
        image: postgres:17
        container_name: postgres
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: app_db
        ports:
            - "5432:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - app-network
    
networks:
    app-network:
        driver: bridge

volumes:
    postgres_data:
